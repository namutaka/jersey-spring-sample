//
// build.gradle
//

apply plugin: 'idea'

def jerseyVersion = '2.22.2'
def springVersion = '3.2.8.RELEASE'


idea {
    module {
        inheritOutputDirs = true
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    version = '1.0'

    def defaultEncoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.slf4j:slf4j-api:1.7.2"
        compile "ch.qos.logback:logback-classic:1.1.3"
        compile "org.slf4j:jcl-over-slf4j:1.7.12"

        compile 'org.apache.commons:commons-lang3:3.4'
        compile "javax.ws.rs:javax.ws.rs-api:2.0.1"

        testCompile 'junit:junit:4.11'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }
}

project(':server') {
    apply plugin: 'jetty'
    apply plugin: 'war'

    dependencies {
        compile "javax.servlet:javax.servlet-api:3.1.0"

        compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
        compile "org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}"
        compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"

        compile "org.springframework:spring-core:${springVersion}", {
            exclude module:"commons-logging:commons-logging"
        }
        compile "org.springframework:spring-context:${springVersion}"
        compile "org.springframework:spring-web:${springVersion}"

        compile project(':common')
    }

    jettyRun {
        httpPort = 8080
    }
}

project(':client') {
    dependencies {
        compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
        compile "org.glassfish.jersey.ext:jersey-proxy-client:${jerseyVersion}"
        compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
        compile project(':common')
    }

    // Start/Stop the app server
    test.doFirst {
        def port = 8180
        def server = project(':server')

        [server.jettyRun, server.jettyStop].each {
            it.stopPort = 8081
            it.stopKey = 'stopKey'
        }
        server.jettyRun.httpPort = port
        server.jettyRun.daemon = true
        server.jettyRun.execute()

        environment 'API_BASE_URL', "http://localhost:${port}/server"
    }
    test.dependsOn project(':server').assemble

    test.doLast {
        project(':server').jettyStop.execute()
    }
}


